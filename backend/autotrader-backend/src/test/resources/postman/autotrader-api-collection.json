{
  "info": {
    "name": "Autotrader API",
    "description": "API collection for the Autotrader application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Reference Data",
      "item": [
        {
          "name": "Get All Active Car Brands",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Each brand has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(brand) {",
                  "            pm.expect(brand).to.have.property('id');",
                  "            pm.expect(brand).to.have.property('name');",
                  "            pm.expect(brand).to.have.property('displayNameEn');",
                  "            pm.expect(brand).to.have.property('displayNameAr');",
                  "            pm.expect(brand).to.have.property('isActive');",
                  "            pm.expect(brand.isActive).to.be.true;",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "// Store the first brand ID for use in other tests if any brands exist",
                  "pm.test(\"Store dynamic brand ID if brands exist\", function() {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        var firstBrandId = jsonData[0].id;",
                  "        pm.collectionVariables.set(\"dynamicBrandId\", firstBrandId);",
                  "        console.log(\"Set dynamicBrandId to \" + firstBrandId);",
                  "    } else {",
                  "        pm.collectionVariables.set(\"dynamicBrandId\", 0);",
                  "        console.log(\"No brands found, dynamicBrandId set to 0\");",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/brands",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "brands"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Active Car Models for Brand",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Each model has required fields and matches brandId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var expectedBrandId = Number(pm.collectionVariables.get(\"dynamicBrandId\"));",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(model) {",
                  "            pm.expect(model).to.have.property('id');",
                  "            pm.expect(model).to.have.property('name');",
                  "            pm.expect(model).to.have.property('displayNameEn');",
                  "            pm.expect(model).to.have.property('displayNameAr');",
                  "            pm.expect(model).to.have.property('isActive');",
                  "            pm.expect(model.isActive).to.be.true;",
                  "            pm.expect(model).to.have.property('brand');",
                  "            pm.expect(model.brand).to.have.property('id');",
                  "            pm.expect(model.brand.id).to.equal(expectedBrandId);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// If dynamicBrandId is not set, default to 1",
                  "if (!pm.collectionVariables.get(\"dynamicBrandId\")) {",
                  "    console.warn(\"dynamicBrandId not set, this test might not run correctly. Setting default value of 1.\");",
                  "    pm.collectionVariables.set(\"dynamicBrandId\", \"1\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/brands/{{dynamicBrandId}}/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "brands", "{{dynamicBrandId}}", "models"]
            }
          },
          "response": []
        },
        {
          "name": "Get Models for Non-existent Brand",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 for non-existent brand\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data/brands/999999999/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data", "brands", "999999999", "models"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
