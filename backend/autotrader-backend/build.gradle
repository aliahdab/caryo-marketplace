plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.autotrader'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
   // Flyway for database migrations
   implementation 'org.flywaydb:flyway-core:9.22.3'

    // JSR 305 for @NonNull, @Nullable, etc.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.h2database:h2:2.2.224'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // File type detection
    implementation 'org.apache.tika:tika-core:2.9.1'

    // AWS SDK (S3)
    implementation platform('software.amazon.awssdk:bom:2.25.18')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:url-connection-client'

    // Dev Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.21.0'
    testImplementation 'org.testcontainers:minio:1.19.7'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Excluding test implementations that clash with production code
                "com/autotrader/autotraderbackend/exception/TestAuthenticationExceptionHandler.class",
                "com/autotrader/autotraderbackend/config/TestResourceCleanupService.class",
                "com/autotrader/autotraderbackend/service/TestJwtService.class"
            ])
        }))
    }
}

// Configure Flyway
flyway {
    url = 'jdbc:postgresql://localhost:5432/autotrader'
    user = 'postgres'
    password = 'postgres'
    locations = ['filesystem:src/main/resources/db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
    cleanDisabled = false  // Enable clean for development
}

// Environment-specific Flyway tasks
tasks.register('flywayMigrateDev') {
    group = 'Database'
    description = 'Migrates the database for development environment'
    doFirst {
        flyway {
            locations = ['filesystem:src/main/resources/db/migration', 'filesystem:src/main/resources/db/dev']
            placeholders = [
                'environment': 'development'
            ]
        }
    }
    finalizedBy flywayMigrate
}

tasks.register('flywayMigrateTest') {
    group = 'Database'
    description = 'Migrates the database for test environment'
    doFirst {
        flyway {
            url = 'jdbc:postgresql://localhost:5432/autotrader_test'
            user = 'postgres'
            password = 'postgres'
            locations = ['filesystem:src/main/resources/db/migration', 'filesystem:src/main/resources/db/test']
            placeholders = [
                'environment': 'test'
            ]
        }
    }
    finalizedBy flywayMigrate
}

tasks.register('flywayMigrateProd') {
    group = 'Database'
    description = 'Migrates the database for production environment'
    doFirst {
        flyway {
            cleanDisabled = true
            locations = ['classpath:db/migration']
            placeholders = [
                'environment': 'production'
            ]
        }
    }
    finalizedBy flywayMigrate
}

// Database management tasks
tasks.register('createTestDb') {
    group = 'Database'
    description = 'Creates the test database if it does not exist'
    doFirst {
        exec {
            workingDir '.'
            commandLine 'docker', 'compose', '-f', 'docker-compose.dev.yml', 'exec', '-T', 'db', 
                       'psql', '-U', 'postgres', '-d', 'postgres', '-c', 
                       'CREATE DATABASE autotrader_test WITH OWNER postgres;'
            ignoreExitValue = true
        }
    }
}

tasks.register('dropTestDb') {
    group = 'Database'
    description = 'Drops the test database if it exists'
    doFirst {
        exec {
            workingDir '.'
            commandLine 'docker', 'compose', '-f', 'docker-compose.dev.yml', 'exec', '-T', 'db',
                       'psql', '-U', 'postgres', '-d', 'postgres', '-c',
                       'DROP DATABASE IF EXISTS autotrader_test;'
            ignoreExitValue = true
        }
    }
}

tasks.register('resetTestDb') {
    group = 'Database'
    description = 'Resets the test database (drop, create, migrate)'
    dependsOn dropTestDb
    dependsOn createTestDb
    dependsOn flywayMigrateTest
    tasks.findByName('createTestDb').mustRunAfter dropTestDb
    tasks.findByName('flywayMigrateTest').mustRunAfter createTestDb
}
