plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.autotrader'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // JSR 305 for @NonNull, @Nullable, etc.
    implementation 'com.google.code.findbugs:jsr305:3.0.2' // Added this line

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.h2database:h2:2.2.224'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // File type detection
    implementation 'org.apache.tika:tika-core:2.9.1'

    // AWS SDK (S3)
    implementation platform('software.amazon.awssdk:bom:2.25.18')
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:url-connection-client'

    // Dev Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.21.0'
    testImplementation 'org.testcontainers:minio:1.19.7'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Excluding test implementations that clash with production code
                "com/autotrader/autotraderbackend/exception/TestAuthenticationExceptionHandler.class",
                "com/autotrader/autotraderbackend/config/TestResourceCleanupService.class",
                "com/autotrader/autotraderbackend/service/TestJwtService.class"
            ])
        }))
    }
}
