name: Postman API Tests

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    paths:
      - 'backend/autotrader-backend/**'
  schedule:
    - cron: '0 0 * * 1'

jobs:
  api-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
        
      - name: Setup Gradle Environment
        uses: ./.github/actions/gradle-setup
        with:
          working-directory: "./backend/autotrader-backend"
          java-version: "21"
          gradle-version: "8.5"
          cache: true
        
      - name: Ensure Gradle Wrapper
        working-directory: ./backend/autotrader-backend
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew script not found! Generating a new one..."
            if command -v gradle &> /dev/null; then
              gradle wrapper --gradle-version=8.5
            else
              echo "ERROR: Could not generate wrapper with Gradle CLI"
              exit 1
            fi
          fi
          chmod +x ./gradlew

      - name: Setup Docker Services
        uses: ./.github/actions/docker-services-setup
        with:
          docker-compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
          services: "db minio createbuckets redis"
          wait-time: '60'
          db-container-name: "autotrader-backend-db-1"
          db-user: "autotrader"
          minio-container-name: "autotrader-backend-minio-1"
          createbuckets-container-name: "autotrader-backend-createbuckets-1"
          post-minio-ready-wait-seconds: '10'
          # Using the default MinIO credentials that are in docker-compose.dev.yml
          minio-root-user: "minioadmin"
          minio-root-password: "minioadmin"

      # Add explicit MinIO bucket verification and creation step
      - name: Ensure MinIO bucket exists
        run: |
          echo "Verifying MinIO bucket existence..."
          
          # Install MinIO client
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          
          # Configure MinIO client with default minioadmin credentials
          ./mc alias set myminio http://localhost:9000 minioadmin minioadmin
          
          # List buckets to check if our bucket exists
          if ./mc ls myminio | grep -q "autotrader-assets"; then
            echo "✅ autotrader-assets bucket exists!"
          else
            echo "⚠️ autotrader-assets bucket not found, creating it..."
            ./mc mb --ignore-existing myminio/autotrader-assets
            ./mc policy set download myminio/autotrader-assets
            echo "✅ Created autotrader-assets bucket with download policy"
          fi
          
          # Double-check creation
          ./mc ls myminio

      - name: Create application-dev.yml
        working-directory: ./backend/autotrader-backend
        run: |
          mkdir -p src/main/resources
          cat << 'EOC' > src/main/resources/application-dev.yml
          spring:
            datasource:
              url: jdbc:postgresql://localhost:5432/autotrader
              username: autotrader
              password: autotrader
            servlet:
              multipart:
                max-file-size: 10MB
                max-request-size: 10MB
            jpa:
              hibernate:
                ddl-auto: update
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.PostgreSQLDialect
                  format_sql: false
                  show_sql: false
            mail:
              host: localhost
              port: 1025
              username: admin
              password: password
          minio:
            endpoint: http://localhost:9000
            accessKey: minioadmin
            secretKey: minioadmin
            bucket: autotrader-assets
          logging:
            level:
              root: INFO
              com.autotrader: INFO
              org.springframework.web: INFO
              org.hibernate: WARN
          server:
            port: 8080
          EOC

      - name: Prepare Configuration
        working-directory: ./backend/autotrader-backend
        run: |
          # Create application-test.yml with necessary configs
          echo "Creating application-test.yml file..."
          mkdir -p src/main/resources
          
          cat > src/main/resources/application-test.yml << EOF
          # Test configuration that inherits from dev profile
          spring:
            config:
              import: application-dev.yml
            # Enable data initialization
            jpa:
              defer-datasource-initialization: true
            sql:
              init:
                mode: always
          
          # Enable debug logging for DataInitializer
          logging:
            level:
              com.autotrader.autotraderbackend.config.DataInitializer: DEBUG
          EOF
      
      - name: Start Spring Boot Application
        id: spring-boot-start
        uses: ./.github/actions/spring-boot-setup
        with:
          working-directory: "./backend/autotrader-backend"
          spring-profiles: "test"
          debug-mode: "false"
          wait-retries: "30"
          wait-time: "10"
          skip-build: "false"
          server-port: "8080"
          
      - name: Wait for data initialization and extract tokens
        working-directory: ./backend/autotrader-backend
        run: |
          # Wait for DataInitializer to complete
          LOG_FILE="spring-boot.log"
          echo "Waiting for DataInitializer to complete..."
          sleep 10
          
          # Quick check for application health
          if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
            echo "✅ Application is healthy"
          else
            echo "⚠️ Application health check failed"
          fi
          
          # Extract tokens from logs with simplified approach
          echo "Extracting authentication tokens from logs..."
          if grep -q "DEVELOPMENT AUTHENTICATION TOKENS" $LOG_FILE; then
            # Extract admin token
            ADMIN_TOKEN=$(grep -A 10 "ADMIN USER TOKEN" $LOG_FILE | grep -v "ADMIN USER TOKEN" | grep -v "----" | grep -v "^$" | head -1 | tr -d ' ' || echo "")
            if [ ! -z "$ADMIN_TOKEN" ]; then
              echo "✅ Admin token extracted"
              echo "ADMIN_TOKEN=$ADMIN_TOKEN" >> $GITHUB_ENV
            fi
            
            # Extract user token
            USER_TOKEN=$(grep -A 10 "REGULAR USER TOKEN" $LOG_FILE | grep -v "REGULAR USER TOKEN" | grep -v "----" | grep -v "^$" | head -1 | tr -d ' ' || echo "")
            if [ ! -z "$USER_TOKEN" ]; then
              echo "✅ Regular user token extracted"
              echo "USER_TOKEN=$USER_TOKEN" >> $GITHUB_ENV
            fi
          else
            echo "No authentication tokens found in logs"
          fi

      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: Prepare Authentication Token
        id: prepare-auth
        working-directory: ./backend/autotrader-backend
        run: |
          # Verify the API is running correctly
          echo "Checking API endpoints..."
          HEALTH_RESPONSE=$(curl -s -i http://localhost:8080/actuator/health)
          echo "$HEALTH_RESPONSE" | head -10
          
          # Verify if users endpoint is accessible (if available)
          echo "Checking if users endpoint exists..."
          USERS_ENDPOINT_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/users/check || echo "failed")
          echo "Users endpoint status: $USERS_ENDPOINT_CHECK"
          
          # Use the previously extracted tokens if available
          if [ ! -z "$ADMIN_TOKEN" ]; then
            echo "✅ Using previously extracted admin token"
            TOKEN="$ADMIN_TOKEN"
          elif [ ! -z "$USER_TOKEN" ]; then
            echo "✅ Using previously extracted user token"
            TOKEN="$USER_TOKEN"
          else
            # Try to authenticate directly with the default admin user
            echo "No tokens found in environment, trying direct authentication..."
            AUTH_RESPONSE=$(curl -s -X POST http://localhost:8080/auth/signin \
              -H "Content-Type: application/json" \
              -d '{"username":"admin","password":"Admin123!"}')
            echo "Auth response received."
            
            # Try to extract token from direct authentication
            TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.token // .accessToken // .access_token // ""')
            
            # If direct auth failed, create a test user
            if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
                echo "⚠️ Direct auth failed. Creating test user via signup..."
                SIGNUP_RESPONSE=$(curl -s -X POST http://localhost:8080/auth/signup \
                  -H "Content-Type: application/json" \
                  -d '{"username":"testapi","email":"testapi@example.com","password":"password123"}')
                
                echo "Signup response: $SIGNUP_RESPONSE"
                sleep 3
                
                echo "Authenticating with test user..."
                AUTH_RESPONSE=$(curl -s -X POST http://localhost:8080/auth/signin \
                  -H "Content-Type: application/json" \
                  -d '{"username":"testapi","password":"password123"}')
                
                echo "Auth response: $AUTH_RESPONSE"
                TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.token // .accessToken // .access_token // ""')
            fi
            
            # Last resort - use a fallback token if all methods fail
            if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
                echo "⚠️ All authentication attempts failed. Using fallback token."
                TOKEN="eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTYyNjk1NDU4OCwiZXhwIjoxNjI3MDQwOTg4fQ.test-token-placeholder"
            fi
          fi
          
          # Verify token works with a test call to a protected endpoint
          if [ ! -z "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
            echo "Testing token with a protected endpoint call..."
            TEST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/test/user || echo "failed")
            echo "Protected endpoint test status: $TEST_RESPONSE"
          fi
          
          echo "Using token: ${TOKEN:0:25}..."
          echo "AUTH_TOKEN=$TOKEN" >> $GITHUB_ENV
          
          # Find the collection file
          echo "Locating Postman collection file..."
          COLLECTION_FILES=$(find ./src/test/resources -name "autotrader-api-collection.json" 2>/dev/null || find ./src/test/resources -name "*.json" -not -path "*/node_modules/*" | head -1)
          
          if [ -z "$COLLECTION_FILES" ]; then
            echo "No JSON files found in test resources!"
            exit 1
          fi
          
          COLLECTION=$(echo "$COLLECTION_FILES" | head -1)
          echo "Using collection: $COLLECTION"
          # Store absolute path for later use
          COLLECTION_ABS_PATH=$(readlink -f "$COLLECTION")
          echo "COLLECTION_PATH=$COLLECTION_ABS_PATH" >> $GITHUB_OUTPUT
          
          # Verify API access with token
          echo "Verifying API access with token..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/reference-data)
          echo "Reference data endpoint status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
              echo "✅ Authentication is working correctly!"
          else
              echo "⚠️ Authentication issue detected. Trying health endpoint..."
              curl -i -H "Authorization: Bearer $TOKEN" http://localhost:8080/actuator/health
          fi
          
          # Create results directory
          mkdir -p ../../results

      - name: Ensure Postman Environment File Exists
        shell: bash
        run: |
          echo "Ensuring Postman environment file is up-to-date..."
          ENV_FILE_PATH="./postman/test_environment.json" # Relative to workspace root
          mkdir -p "$(dirname "$ENV_FILE_PATH")"
          
          echo "Writing current AUTH_TOKEN to $ENV_FILE_PATH"
          TIMESTAMP=$(date +%s)
          EXPORTED_AT=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          
          # Create the environment file with a series of echo statements
          echo '{' > "$ENV_FILE_PATH"
          echo "  \"id\": \"test-environment-$TIMESTAMP\"," >> "$ENV_FILE_PATH"
          echo '  "name": "Test Environment (GitHub Actions)",' >> "$ENV_FILE_PATH"
          echo '  "values": [' >> "$ENV_FILE_PATH"
          echo '    {' >> "$ENV_FILE_PATH"
          echo '      "key": "baseUrl",' >> "$ENV_FILE_PATH"
          echo '      "value": "http://localhost:8080",' >> "$ENV_FILE_PATH"
          echo '      "type": "default",' >> "$ENV_FILE_PATH"
          echo '      "enabled": true' >> "$ENV_FILE_PATH"
          echo '    },' >> "$ENV_FILE_PATH"
          echo '    {' >> "$ENV_FILE_PATH"
          echo '      "key": "authToken",' >> "$ENV_FILE_PATH"
          echo "      \"value\": \"$AUTH_TOKEN\"," >> "$ENV_FILE_PATH"
          echo '      "type": "secret",' >> "$ENV_FILE_PATH"
          echo '      "enabled": true' >> "$ENV_FILE_PATH"
          echo '    },' >> "$ENV_FILE_PATH"
          echo '    {' >> "$ENV_FILE_PATH"
          echo '      "key": "auth_token",' >> "$ENV_FILE_PATH"
          echo "      \"value\": \"$AUTH_TOKEN\"," >> "$ENV_FILE_PATH"
          echo '      "type": "secret",' >> "$ENV_FILE_PATH"
          echo '      "enabled": true' >> "$ENV_FILE_PATH"
          echo '    }' >> "$ENV_FILE_PATH"
          echo '  ],' >> "$ENV_FILE_PATH"
          echo '  "_postman_variable_scope": "environment",' >> "$ENV_FILE_PATH"
          echo "  \"_postman_exported_at\": \"$EXPORTED_AT\"," >> "$ENV_FILE_PATH"
          echo '  "_postman_exported_using": "GitHub Actions"' >> "$ENV_FILE_PATH"
          echo '}' >> "$ENV_FILE_PATH"
          
          echo "Postman environment file $ENV_FILE_PATH updated."

      - name: Run Postman Tests with Newman
        id: postman-tests
        uses: ./.github/actions/postman-tests
        with:
          collection-path: "${{ steps.prepare-auth.outputs.COLLECTION_PATH }}"
          environment-file: '../../postman/test_environment.json' # Path relative to the action's working-directory
          working-directory: './backend/autotrader-backend'      # Action's working-directory
          results-directory: './results'                         # Path relative to the action's working-directory for output
          auto-detect-collection: 'true'
          extra-options: '--bail --export-environment ./results/updated_environment.json --reporters cli,htmlextra,junit' # Path relative to action's working-directory

      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: backend/autotrader-backend/results/
          retention-days: 14
          
      - name: Display test summary
        if: always()
        working-directory: ./backend/autotrader-backend
        run: |
          echo "Postman Test Summary:"
          if [ -f "results/junit-report.xml" ]; then
            echo "Total Tests: $(grep -c "<testcase" results/junit-report.xml || echo "0")"
            echo "Failed Tests: $(grep -c "<failure" results/junit-report.xml || echo "0")"
            echo "Skipped Tests: $(grep -c "<skipped" results/junit-report.xml || echo "0")"
          else
            echo "No test results found"
          fi

      - name: Run diagnostic scripts if tests fail
        if: steps.postman-tests.outputs.test-status == 'failure'
        working-directory: ./backend/autotrader-backend
        run: |
          echo "Running user authentication diagnostics..."
          bash ../../scripts/diagnose-user-auth.sh http://localhost:8080
          
          echo "Testing both auth paths to identify the correct path pattern..."
          bash ../../scripts/test-auth-paths.sh http://localhost:8080
          
          echo "Running Postman tests diagnostics..."
          bash ../../scripts/diagnose-postman-tests.sh http://localhost:8080 "${{ steps.prepare-auth.outputs.COLLECTION_PATH }}" "../../postman/test_environment.json"
          
          echo "Checking for auth errors in the logs..."
          grep -A 5 -B 5 "401\|403\|Authentication\|Unauthorized" spring-boot.log || echo "No authentication errors found in logs"
          
          echo "Examining application logs..."
          tail -n 100 spring-boot.log
          
          echo "Testing non-authenticated endpoints..."
          echo "Health endpoint: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health)"
          echo "Public endpoint: $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/public || echo 'not found')"
          
          # Archive the full test results and logs for debugging
          mkdir -p ./results/diagnostics
          cp spring-boot.log ./results/diagnostics/ || echo "Could not copy log file"
          echo "Test results and logs have been archived for review."
