name: Postman API Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - develop # Changed from main to develop
    paths:
      - 'backend/autotrader-backend/**'
      - '.github/workflows/postman-tests.yml'
      - '.github/actions/docker-services-setup/**'
      - '.github/actions/gradle-setup/**'
      - '.github/actions/spring-boot-setup/**'
      - '.github/actions/postman-tests/**'
      - 'postman/**'
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays at midnight

jobs:
  api-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Prevent hanging builds

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download
        
    # Setup Gradle Environment
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        gradle-version: "8.5"
        cache: true
        
    # Setup Docker Services
    - name: Setup Docker Services
      uses: ./.github/actions/docker-services-setup
      with:
        docker-compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
        services: "db minio createbuckets redis" # These are service names from docker-compose
        wait-time: '60'
        db-container-name: "autotrader-backend-db-1" # Corrected: Use the actual container name
        db-user: "autotrader" # Ensure this matches your DB setup
        minio-container-name: "autotrader-backend-minio-1"
        createbuckets-container-name: "autotrader-backend-createbuckets-1"
        post-minio-ready-wait-seconds: '10' #

    # Start Spring Boot application
    - name: Start Spring Boot Application
      id: spring-boot
      uses: ./.github/actions/spring-boot-setup
      with:
        working-directory: "./backend/autotrader-backend"
        spring-profiles: "dev"
        debug-mode: 'true'
        wait-retries: '45'
        wait-time: '10'
        health-check-path: "/actuator/health"
        
    # Run Postman Tests
    - name: Run Postman Tests
      uses: ./.github/actions/postman-tests
      with:
        environment-file: './postman/test_environment.json'
        results-directory: 'results'
        auto-detect-collection: 'true'
        
    # Upload test results
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: postman-test-results
        path: results/**

    # This step will always run after the tests are done, regardless of success or failure
    - name: Cleanup test environment
      if: always()
      run: |
        echo "Cleaning up test environment"
        
        # Kill the Spring Boot process if it was started
        SPRING_PID="${{ steps.spring-boot.outputs.pid }}"
        if [ ! -z "$SPRING_PID" ]; then
          echo "Stopping Spring Boot application (PID: $SPRING_PID)..."
          kill $SPRING_PID || true
          echo "Spring Boot logs (last 50 lines):"
          if [ -f "./backend/autotrader-backend/spring-boot.log" ]; then
            tail -n 50 ./backend/autotrader-backend/spring-boot.log
          fi
        fi
        
        # Stop Docker services if they were started
        if [ -f "./backend/autotrader-backend/docker-compose.dev.yml" ]; then
          echo "Stopping Docker services..."
          cd ./backend/autotrader-backend
          docker compose -f docker-compose.dev.yml down -v
        fi
        
        echo "Cleanup complete"
