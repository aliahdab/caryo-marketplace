name: Postman API Tests

on:
  workflow_dispatch:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 1'

jobs:
  api-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
        
      - name: Setup Gradle Environment
        uses: ./.github/actions/gradle-setup
        with:
          working-directory: "./backend/autotrader-backend"
          java-version: "17"
          gradle-version: "8.5"
          cache: true
        
      - name: Ensure Gradle Wrapper
        working-directory: ./backend/autotrader-backend
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "gradlew script not found! Generating a new one..."
            if command -v gradle &> /dev/null; then
              gradle wrapper --gradle-version=8.5
            else
              echo "ERROR: Could not generate wrapper with Gradle CLI"
              exit 1
            fi
          fi
          chmod +x ./gradlew

      - name: Setup Docker Services
        uses: ./.github/actions/docker-services-setup
        with:
          docker-compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
          services: "db minio createbuckets redis"
          wait-time: '120'
          db-container-name: "autotrader-backend-db-1"
          db-user: "autotrader"
          minio-container-name: "autotrader-backend-minio-1"
          createbuckets-container-name: "autotrader-backend-createbuckets-1"
          post-minio-ready-wait-seconds: '20'
          # Using the default MinIO credentials that are in docker-compose.dev.yml
          minio-root-user: "minioadmin"
          minio-root-password: "minioadmin"

      # Add explicit MinIO bucket verification and creation step
      - name: Ensure MinIO bucket exists
        run: |
          echo "Verifying MinIO bucket existence..."
          
          # Install MinIO client
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          
          # Configure MinIO client with default minioadmin credentials
          ./mc config host add myminio http://localhost:9000 minioadmin minioadmin
          
          # List buckets to check if our bucket exists
          if ./mc ls myminio | grep -q "autotrader-assets"; then
            echo "✅ autotrader-assets bucket exists!"
          else
            echo "⚠️ autotrader-assets bucket not found, creating it..."
            ./mc mb --ignore-existing myminio/autotrader-assets
            ./mc policy set download myminio/autotrader-assets
            echo "✅ Created autotrader-assets bucket with download policy"
          fi
          
          # Double-check creation
          ./mc ls myminio

      - name: Create application-dev.yml
        working-directory: ./backend/autotrader-backend
        run: |
          mkdir -p src/main/resources
          cat << 'EOC' > src/main/resources/application-dev.yml
          spring:
            datasource:
              url: jdbc:postgresql://localhost:5432/autotrader
              username: autotrader
              password: autotrader
            servlet:
              multipart:
                max-file-size: 10MB
                max-request-size: 10MB
            jpa:
              hibernate:
                ddl-auto: update
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.PostgreSQLDialect
                  format_sql: true
                  show_sql: true
            mail:
              host: localhost
              port: 1025
              username: admin
              password: password
          minio:
            endpoint: http://localhost:9000
            accessKey: minioadmin
            secretKey: minioadmin
            bucket: autotrader-assets
          logging:
            level:
              root: INFO
              com.autotrader: DEBUG
              org.springframework.web: DEBUG
              org.hibernate: INFO
          server:
            port: 8080
          EOC

      - name: Start Spring Boot Application
        id: spring-boot-start
        working-directory: ./backend/autotrader-backend
        run: |
          # Check for port conflicts
          if netstat -tuln | grep -q ":8080 "; then
            echo "Port 8080 is already in use!"
            netstat -tuln | grep ":8080 "
            pid=$(lsof -t -i:8080) || true
            if [ ! -z "$pid" ]; then
              kill -9 $pid || true
            fi
          fi
          # Start application
          nohup ./gradlew bootRun --args='--spring.profiles.active=dev' > spring-boot.log 2>&1 &
          SPRING_PID=$!
          echo "pid=$SPRING_PID" >> $GITHUB_OUTPUT
          echo "Spring Boot started with PID: $SPRING_PID"
          # Wait for application to start
          MAX_WAIT=60
          WAIT_COUNT=0
          while [ $WAIT_COUNT -lt $MAX_WAIT ]; do
            if curl -s http://localhost:8080/actuator/health > /dev/null; then
              echo "Spring Boot application is running!"
              curl -s http://localhost:8080/actuator/health
              break
            fi
            # Check if process is still running
            if ! ps -p $SPRING_PID > /dev/null; then
              echo "Spring Boot process died! Check logs for details."
              cat spring-boot.log
              exit 1
            fi
            echo "Still waiting for application to start... ($WAIT_COUNT/$MAX_WAIT)"
            sleep 5
            WAIT_COUNT=$((WAIT_COUNT + 1))
          done
          if [ $WAIT_COUNT -ge $MAX_WAIT ]; then
            echo "Spring Boot application failed to start within timeout!"
            tail -n 50 spring-boot.log
            exit 1
          fi

      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: Run Postman Tests
        working-directory: ./backend/autotrader-backend
        run: |
          # Create results directory
          mkdir -p ../../results
          COLLECTION="./src/test/resources/postman/autotrader-api-collection.json"
          ENV_FILE="../../postman/test_environment.json"
          newman run "$COLLECTION" \
            --environment "$ENV_FILE" \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export ../../results/report.html \
            --reporter-junit-export ../../results/junit-report.xml
        
      - name: Upload test results and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            results/**
            ./backend/autotrader-backend/spring-boot*.log
            ./backend/autotrader-backend/build/reports/**/*

      - name: Cleanup test environment
        if: always()
        run: |
          # Kill Spring Boot process
          SPRING_PID="${{ steps.spring-boot-start.outputs.pid }}"
          if [ ! -z "$SPRING_PID" ]; then
            kill $SPRING_PID || true
          fi
          # Stop Docker services
          cd ./backend/autotrader-backend
          docker compose -f docker-compose.dev.yml down -v
