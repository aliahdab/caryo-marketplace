name: Backend Integration Tests

on:
  workflow_dispatch:  # Manual trigger only
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  pull_request:
    paths:
      - 'backend/autotrader-backend/**'
      - '.github/workflows/integration-tests.yml'
    branches: [ 'main', 'develop' ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Prevent hanging builds
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better change detection
    
    - name: Set up Docker Compose
      uses: isbang/compose-action@v1.5.1
      with:
        compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
        down-flags: "--volumes"  # Clean up volumes when done
        services: |
          db
          minio
          createbuckets
          redis
    
    # Check if services are healthy
    - name: Wait for services to be ready
      run: |
        echo "Listing all running Docker containers for debugging..."
        docker ps
        
        # Give services extra time to start - longer initialization period
        echo "Sleeping for 60 seconds to ensure containers are fully initialized..."
        sleep 60
        
        echo "Waiting for PostgreSQL to be ready..."
        # Try multiple times with increasing sleep periods
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if docker exec $(docker ps -q -f name=db) pg_isready -U autotrader -t 15; then
            echo "PostgreSQL is ready!"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "PostgreSQL not ready yet. Attempt $RETRY_COUNT of $MAX_RETRIES"
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "PostgreSQL failed to become ready. Showing container logs:"
              docker logs $(docker ps -q -f name=db)
              exit 1
            fi
            
            sleep $((RETRY_COUNT * 15))
          fi
        done
        
        echo "Checking MinIO health..."
        curl --retry 10 --retry-delay 5 --connect-timeout 10 -f http://localhost:9000/minio/health/live || {
          echo "MinIO health check failed. Showing container logs:"
          docker logs $(docker ps -q -f name=minio)
          exit 1
        }
        
        echo "All services are ready!"
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2
    
    # Check for Gradle cache and use it if available
    - name: Setup Gradle Cache
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: wrapper
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
    
    - name: Setup Gradle wrapper if needed
      working-directory: ./backend/autotrader-backend
      run: |
        if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          echo "Gradle wrapper jar not found, generating wrapper..."
          gradle wrapper
        fi
        
    - name: Run Integration Tests
      working-directory: ./backend/autotrader-backend
      run: |
        chmod +x ./gradlew
        ./gradlew integrationTest jacocoIntegrationTestReport jacocoTestReport --info
        
    - name: Verify JaCoCo report exists
      run: |
        echo "Checking for JaCoCo report file..."
        ls -la ./backend/autotrader-backend/build/reports/jacoco/test/ || echo "JaCoCo test directory not found"
        find ./backend/autotrader-backend/build/reports/ -name "*.xml" -type f
      
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          backend/autotrader-backend/build/reports/tests/integrationTest/
          backend/autotrader-backend/build/test-results/integrationTest/
    
    - name: Upload test coverage
      if: success() || failure()
      uses: codecov/codecov-action@v4
      with:
        files: |
          ./backend/autotrader-backend/build/reports/jacoco/test/jacocoTestReport.xml
          ./backend/autotrader-backend/build/reports/jacoco/integrationTest/jacocoIntegrationTestReport.xml
        directory: ./backend/autotrader-backend/build/reports/
        flags: integration-tests
        fail_ci_if_error: false
        verbose: true
