name: Backend Integration Tests

on:
  workflow_dispatch:  # Manual trigger only
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight
  pull_request:
    paths:
      - 'backend/autotrader-backend/**'
      - '.github/workflows/integration-tests.yml'
      - '.github/actions/docker-services-setup/**'
      - '.github/actions/gradle-setup/**'
      - '.github/actions/spring-boot-setup/**'
    branches: [ 'main', 'develop' ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Prevent hanging builds

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better change detection
        lfs: true
        
    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        cache: true
        
    # Ensure Gradle Wrapper exists
    - name: Ensure Gradle Wrapper
      working-directory: ./backend/autotrader-backend
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "gradlew script not found! Generating a new one..."
          # First try to use the Gradle CLI if available
          if command -v gradle &> /dev/null; then
            echo "Using gradle CLI to generate wrapper"
            gradle wrapper --gradle-version=8.5
          else
            # If gradle CLI isn't available, use any gradle wrapper in other projects
            echo "Trying to copy Gradle wrapper from elsewhere"
            # First look for wrapper jar
            if [ -f "../gradle/wrapper/gradle-wrapper.jar" ]; then
              echo "Found ../gradle/wrapper/gradle-wrapper.jar"
              mkdir -p ./gradle/wrapper/
              cp ../gradle/wrapper/gradle-wrapper.jar ./gradle/wrapper/
              cp ../gradle/wrapper/gradle-wrapper.properties ./gradle/wrapper/
              cp ../gradlew ./
              cp ../gradlew.bat ./
              chmod +x ./gradlew
            else
              echo "ERROR: Could not generate or find Gradle wrapper!"
              echo "Current directory structure:"
              ls -la ./
              echo "Parent directory structure:"
              ls -la ../
              exit 1
            fi
          fi
        fi
        echo "Verifying gradlew exists:"
        ls -la ./gradlew || echo "gradlew still not found!"
        
    # Use the Docker services setup composite action
    - name: Setup Docker Services
      uses: ./.github/actions/docker-services-setup
      with:
        docker-compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
        services: "db minio createbuckets redis"
        wait-time: '120'  # Increased wait time
        db-container-name: "autotrader-backend-db-1"
        db-user: "autotrader"
        minio-container-name: "autotrader-backend-minio-1"
        createbuckets-container-name: "autotrader-backend-createbuckets-1"
        post-minio-ready-wait-seconds: '20'  # Increased post-ready wait time
        minio-root-user: "newuser"  # Custom MinIO user
        minio-root-password: "newpassword"  # Custom MinIO password

    # Run the actual integration tests
    - name: Run Integration Tests
      working-directory: ./backend/autotrader-backend
      run: |
        # Check available tasks
        echo "Checking available Gradle tasks..."
        ./gradlew tasks

        # Check if integrationTest task exists
        if ./gradlew tasks --all | grep -q "integrationTest"; then
          echo "integrationTest task found, running integration tests"
          ./gradlew integrationTest --info
        else
          echo "WARNING: integrationTest task not found! Running regular tests instead."
          ./gradlew test --info
        fi

        # Check if JaCoCo report tasks exist and run them
        if ./gradlew tasks --all | grep -q "jacocoTestReport"; then
          echo "jacocoTestReport task found, generating reports"
          ./gradlew jacocoTestReport --info
        fi

        if ./gradlew tasks --all | grep -q "jacocoIntegrationTestReport"; then
          echo "jacocoIntegrationTestReport task found, generating reports"
          ./gradlew jacocoIntegrationTestReport --info
        fi

    - name: Verify JaCoCo report exists
      run: |
        echo "Checking for JaCoCo report file..."
        ls -la ./backend/autotrader-backend/build/reports/jacoco/test/ || echo "JaCoCo test directory not found"
        find ./backend/autotrader-backend/build/reports/ -name "*.xml" -type f

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          backend/autotrader-backend/build/reports/tests/integrationTest/
          backend/autotrader-backend/build/test-results/integrationTest/

    - name: Upload test coverage
      if: success() || failure()
      uses: codecov/codecov-action@v4
      with:
        files: |
          ./backend/autotrader-backend/build/reports/jacoco/test/jacocoTestReport.xml
          ./backend/autotrader-backend/build/reports/jacoco/integrationTest/jacocoIntegrationTestReport.xml
        directory: ./backend/autotrader-backend/build/reports/
        flags: integration-tests
        fail_ci_if_error: false
        verbose: true
