name: Reusable Spring Boot Build and Star

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "Path to the Spring Boot application directory"
      build-args:
        required: false
        type: string
        default: "build -x test"
        description: "Gradle build arguments"
      spring-profiles:
        required: false
        type: string
        default: "dev"
        description: "Spring profiles to activate"
      debug-mode:
        required: false
        type: boolean
        default: true
        description: "Whether to enable debug logging"
      wait-retries:
        required: false
        type: number
        default: 45
        description: "Number of retries for health check"
      wait-time:
        required: false
        type: number
        default: 10
        description: "Time in seconds between retries"
      health-check-path:
        required: false
        type: string
        default: "/actuator/health"
        description: "Path for health check"
      skip-build:
        required: false
        type: boolean
        default: false
        description: "Whether to skip build step"

jobs:
  spring-boot-build-start:
    runs-on: ubuntu-lates
    steps:
      - name: Build Spring Boot Application
        if: ${{ !inputs.skip-build }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Building Spring Boot application with arguments: ${{ inputs.build-args }}"
          # Check if Gradle home is se
          if [ ! -z "$GRADLE_USER_HOME" ]; then
            echo "Using custom Gradle home: $GRADLE_USER_HOME"
          fi

          # Try with no daemon mode firs
          ./gradlew ${{ inputs.build-args }} --no-daemon || {
            echo "First build attempt failed, trying with more diagnostics..."

            # Check if Gradle home is accessible and writable
            if [ ! -z "$GRADLE_USER_HOME" ]; then
              echo "Verifying Gradle home directory:"
              ls -la $GRADLE_USER_HOME
              touch $GRADLE_USER_HOME/test_write && echo "Write test passed" || echo "Write test failed"
            fi

            # Try with specific properties for troubleshooting
            echo "Retrying with debug flags..."
            ./gradlew ${{ inputs.build-args }} --no-daemon --stacktrace --info
          }

      - name: Start Spring Boot Application
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Determine debug flags based on debug-mode inpu
          DEBUG_FLAGS=""
          if [ "${{ inputs.debug-mode }}" = "true" ]; then
            DEBUG_FLAGS="--debug --logging.level.root=DEBUG --logging.level.org.springframework=DEBUG"
          fi

          # Start the application in the background with specified profile
          echo "Starting Spring Boot with profile: ${{ inputs.spring-profiles }}"
          nohup ./gradlew bootRun --no-daemon
            --args='--spring.profiles.active=${{ inputs.spring-profiles }} $DEBUG_FLAGS'
            > spring-boot.log 2>&1 &

          # Store the PID for later cleanup
          echo "SPRING_PID=$!" >> $GITHUB_ENV

          echo "Spring Boot application started with PID: $!"

          # Show initial log output to help with debugging
          sleep 5
          echo "Initial Spring Boot startup log (first 20 lines):"
          head -n 20 spring-boot.log || true

          # Wait for Spring Boot to become ready with enhanced diagnostics
          echo "Waiting for Spring Boot application to become ready..."
          MAX_RETRIES=${{ inputs.wait-retries }}
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Checking Spring Boot health (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."

            # Check process is still running
            if ! ps -p $SPRING_PID > /dev/null; then
              echo "ERROR: Spring Boot process is not running anymore! Checking logs..."
              cat spring-boot.log
              echo "Attempting to restart the application..."
              nohup ./gradlew bootRun --no-daemon
                --args='--spring.profiles.active=${{ inputs.spring-profiles }} $DEBUG_FLAGS' > spring-boot.log 2>&1 &
              echo "SPRING_PID=$!" >> $GITHUB_ENV
              echo "New process started with PID: $!"
              sleep 10
              continue
            fi

            # Try different health endpoints with verbose outpu
            HEALTH_CHECK=$(curl -v http://localhost:8080${{ inputs.health-check-path }} 2>&1)
            if echo "$HEALTH_CHECK" | grep -q "UP"; then
              echo "Spring Boot application is ready! (via health check)"
              break
            fi

            echo "Health check response:"
            echo "$HEALTH_CHECK" | tail -n 10

            OTHER_CHECK=$(curl -v http://localhost:8080/ 2>&1)
            if echo "$OTHER_CHECK" | grep -q "HTTP/1.1 200\|HTTP/1.1 302"; then
              echo "Spring Boot application is ready! (via root path)"
              break
            fi

            # Show current log state periodically
            if [ $((RETRY_COUNT % 5)) -eq 0 ]; then
              echo "Current Spring Boot log tail:"
              tail -n 20 spring-boot.log
              echo "Checking if server is listening on port 8080..."
              netstat -tulpn 2>/dev/null | grep 8080 || echo "No process listening on port 8080"
            fi

            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Spring Boot application failed to become ready in time."
              echo "Full application log:"
              cat spring-boot.log
              echo "Continuing anyway to see if tests can connect..."
            fi
            sleep ${{ inputs.wait-time }}
          done

      - name: Output Spring Boot Status
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Spring Boot application status:"
          if ps -p $SPRING_PID > /dev/null; then
            echo "Running (PID: $SPRING_PID)"
          else
            echo "Not running"
            echo "Last 50 lines of log:"
            tail -n 50 spring-boot.log || true
          fi
