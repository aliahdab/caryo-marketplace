name: Reusable Gradle Setup

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "Path to the directory containing the Gradle wrapper"
      java-version:
        required: false
        type: string
        default: '17'
        description: "Java version to use"
      distribution:
        required: false
        type: string
        default: 'temurin'
        description: "Java distribution to use"
      gradle-version:
        required: false
        type: string
        default: '8.5'
        description: "Gradle version to use if wrapper needs to be fixed"
      cache:
        required: false
        type: boolean
        default: true
        description: "Whether to cache Gradle dependencies"
      cache-read-only:
        required: false
        type: boolean
        default: false
        description: "Whether the Gradle cache should be read-only"

jobs:
  gradle-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Set up custom Gradle environment
        run: |
          echo "Setting up Gradle environment with proper permissions..."

          # Create a custom Gradle home directory in the workspace instead of /home/runner/.gradle
          mkdir -p $GITHUB_WORKSPACE/gradle-home
          echo "GRADLE_USER_HOME=$GITHUB_WORKSPACE/gradle-home" >> $GITHUB_ENV

          # Create necessary subdirectories
          mkdir -p $GITHUB_WORKSPACE/gradle-home/wrapper/dists
          mkdir -p $GITHUB_WORKSPACE/gradle-home/caches
          mkdir -p $GITHUB_WORKSPACE/gradle-home/daemon

          # Set full permissions on the custom Gradle home
          chmod -R 777 $GITHUB_WORKSPACE/gradle-home

          echo "Custom Gradle home directory is ready at $GITHUB_WORKSPACE/gradle-home"

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.distribution }}
          cache: ${{ inputs.cache && 'gradle' || 'none' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
        continue-on-error: true
        id: wrapper-validation

      - name: Manual Gradle wrapper validation (fallback)
        if: always()
        run: |
          echo "Gradle wrapper validation action status: ${{ steps.wrapper-validation.outcome }}"
          if [[ "${{ steps.wrapper-validation.outcome }}" == "failure" ]]; then
            echo "Gradle wrapper validation action failed, performing manual validation"
            # Check if wrapper jar exists
            if [ ! -f ${{ inputs.working-directory }}/gradle/wrapper/gradle-wrapper.jar ]; then
              echo "ERROR: gradle-wrapper.jar is missing!"
              exit 1
            fi
            # Check wrapper properties
            if [ ! -f ${{ inputs.working-directory }}/gradle/wrapper/gradle-wrapper.properties ]; then
              echo "ERROR: gradle-wrapper.properties is missing!"
              exit 1
            fi
            # Check for proper distribution URL format in properties
            if ! grep -q "services.gradle.org/distributions" ${{ inputs.working-directory }}/gradle/wrapper/gradle-wrapper.properties; then
              echo "ERROR: Invalid distribution URL in gradle-wrapper.properties"
              cat ${{ inputs.working-directory }}/gradle/wrapper/gradle-wrapper.properties
              exit 1
            fi
            echo "Manual Gradle wrapper validation passed"
          else
            echo "Gradle wrapper validation action succeeded."
          fi

      # Check for Gradle cache and use it if available
      - name: Setup Gradle Cache
        if: inputs.cache
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: wrapper
          cache-read-only: ${{ inputs.cache-read-only }}

      - name: Setup Gradle wrapper properly if issues detected
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Checking if gradle-wrapper.jar might be an LFS pointer or otherwise invalid..."
          MISSING_JAR=false
          INVALID_JAR=false
          JAR_SIZE=0

          # Check if JAR exists
          if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
            echo "ERROR: gradle-wrapper.jar is missing."
            MISSING_JAR=true
          else
            # Check JAR size
            JAR_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
            echo "Current gradle-wrapper.jar size: $JAR_SIZE bytes"

            # Check for suspiciously small size (LFS pointer is ~130 bytes)
            if [ "$JAR_SIZE" -lt 10000 ]; then
              echo "WARNING: gradle-wrapper.jar is suspiciously small ($JAR_SIZE bytes). It might be an LFS pointer."
              echo "Content of the suspicious file:"
              cat ./gradle/wrapper/gradle-wrapper.jar
              INVALID_JAR=true
            fi

            # Try to verify JAR validity by checking ZIP header
            if ! file ./gradle/wrapper/gradle-wrapper.jar | grep -q "Zip archive"; then
              echo "WARNING: gradle-wrapper.jar does not appear to be a valid ZIP archive"
              INVALID_JAR=true
            fi
          fi

          # Fix wrapper if issues detected
          if [ "$MISSING_JAR" = true ] || [ "$INVALID_JAR" = true ]; then
            echo "Issues detected with gradle-wrapper.jar. Generating a new wrapper..."

            # Backup existing wrapper files
            mkdir -p ./gradle/wrapper-backup
            if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
              mv ./gradle/wrapper/gradle-wrapper.jar ./gradle/wrapper-backup/gradle-wrapper.jar.bak
            fi
            if [ -f ./gradle/wrapper/gradle-wrapper.properties ]; then
              cp ./gradle/wrapper/gradle-wrapper.properties ./gradle/wrapper-backup/gradle-wrapper.properties.bak
            fi

            # Try to use local gradle to generate wrapper
            if command -v gradle &> /dev/null; then
              echo "Generating wrapper using local gradle installation..."
              gradle wrapper --gradle-version ${{ inputs.gradle-version }} --distribution-type bin
            else
              # Try to download and use Gradle directly
              echo "Local gradle not found. Downloading Gradle ${{ inputs.gradle-version }}..."
              GRADLE_ZIP=gradle-${{ inputs.gradle-version }}-bin.zip
              GRADLE_URL=https://services.gradle.org/distributions/gradle-${{ inputs.gradle-version }}-bin.zip

              curl -L -o $GRADLE_ZIP $GRADLE_URL
              unzip -q -d . $GRADLE_ZIP
              chmod +x ./gradle-${{ inputs.gradle-version }}/bin/gradle
              ./gradle-${{ inputs.gradle-version }}/bin/gradle wrapper --gradle-version ${{ inputs.gradle-version }} --distribution-type bin
              rm -rf gradle-${{ inputs.gradle-version }} $GRADLE_ZIP
            fi

            # Verify new wrapper
            if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
              NEW_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
              echo "New gradle-wrapper.jar generated. Size: $NEW_SIZE bytes"
              if [ "$NEW_SIZE" -lt 10000 ]; then
                echo "ERROR: New gradle-wrapper.jar still suspiciously small. CI environment may need investigation."
                exit 1
              fi
            else
              echo "ERROR: Failed to generate gradle-wrapper.jar. CI environment may need investigation."
              exit 1
            fi
          else
            echo "gradle-wrapper.jar appears valid. Size: $JAR_SIZE bytes."
          fi

          # Final verification
          echo "Final verification of gradle-wrapper.jar:"
          ls -la ./gradle/wrapper/gradle-wrapper.jar
          file ./gradle/wrapper/gradle-wrapper.jar

      - name: Grant execute permission for gradlew
        working-directory: ${{ inputs.working-directory }}
        run: chmod +x ./gradlew
