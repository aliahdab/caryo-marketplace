name: Backend Unit Tests

on:
  workflow_dispatch:  # Manual trigger
  pull_request:
    paths:
      - 'backend/autotrader-backend/**'
      - '.github/workflows/unit-tests.yml'
      - '.github/actions/gradle-setup/**'
    branches: [ 'main', 'develop' ]  # Run on PRs to both main and develop

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "21"
        cache: true

    # Run unit tests using Gradle
    - name: Run Unit Tests
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Running unit tests (excluding integration tests)..."
        export SPRING_PROFILES_ACTIVE=unit,h2
        
        # Run the test task which is already configured to exclude integration tests
        ./gradlew test --info
        
        # Check exit code
        if [ $? -ne 0 ]; then
          echo "Unit tests failed. Check the logs for details."
          exit 1
        fi
        
        # Generate JaCoCo reports if available
        if ./gradlew tasks --all | grep -q "jacocoTestReport"; then
          echo "Generating JaCoCo test report..."
          ./gradlew jacocoTestReport
        fi
        
        # Display test summary
        echo "Test Summary:"
        if [ -f "build/reports/tests/test/test-summary.txt" ]; then
          cat build/reports/tests/test/test-summary.txt
        else
          # Fallback to parsing XML files if summary file doesn't exist
          echo "Using XML parsing fallback for test count:"
          TEST_FILES=$(find build/test-results/test -name "TEST-*.xml" 2>/dev/null | wc -l)
          echo "Total Test Classes: $TEST_FILES"
          
          # Count total tests across all XML files
          TOTAL_TESTS=$(grep -r "tests=" build/test-results/test --include="TEST-*.xml" | 
                         awk -F 'tests="' '{sum += $2+0} END {print sum}')
          echo "Total Tests: $TOTAL_TESTS"
          
          # Count failures across all XML files
          TOTAL_FAILURES=$(grep -r "failures=" build/test-results/test --include="TEST-*.xml" | 
                           awk -F 'failures="' '{sum += $2+0} END {print sum}')
          echo "Failures: $TOTAL_FAILURES"
        fi

    # Upload test results and coverage
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: |
          backend/autotrader-backend/build/reports/tests/test/
          backend/autotrader-backend/build/test-results/test/

    - name: Upload test coverage
      if: success() || failure()
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/autotrader-backend/build/reports/jacoco/test/jacocoTestReport.xml
        directory: ./backend/autotrader-backend/build/reports/
        flags: unit-tests
        fail_ci_if_error: false
        verbose: true
