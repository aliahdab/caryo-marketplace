name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      working-directory: ./backend/autotrader-backend
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: ./gradlew build -x test
    
    - name: Run Unit Tests (excluding integration tests)
      working-directory: ./backend/autotrader-backend
      run: ./gradlew test --tests "com.autotrader.autotraderbackend.*Test" --exclude-task integrationTest
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  frontend-build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Jest tests
      working-directory: ./frontend
      run: npm test
      
    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-coverage
        path: frontend/coverage/

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services
        
        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa
        
        # ssh commands
        # ssh user@your-server "cd /path/to/app && \
        #   docker-compose pull && \
        #   docker-compose up -d"
