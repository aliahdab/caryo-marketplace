name: CI/CD Pipeline

on:
  # For direct pushes to main (e.g. merges), only run the deployment steps
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  # For PRs, run the full test suite on PRs to main branch
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened] # Be specific about which PR events trigger the workflow
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  # Backend tests are now handled by the dedicated unit-tests.yml workflow
  # which runs on backend changes to both main and develop branches

  frontend-build-and-test:
    runs-on: ubuntu-latest
    # Only run this job for pull_request events to main branch
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Frontend Build and Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        # Default values for commands and report paths are used from the action itself

  # This job runs quick tests before building/deploying for pushes to main
  main-quick-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    # Setup Gradle for Backend
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        cache: true
    
    # Run basic backend sanity check
    - name: Quick Backend Test
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Running quick sanity check for the backend code..."
        ./gradlew assemble --info
    
    # Run basic frontend sanity check
    - name: Quick Frontend Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        run-tests: 'false'  # Skip tests, just build to ensure code compiles
        
  docker-build:
    runs-on: ubuntu-latest
    needs: [main-quick-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]  # This is fine because docker-build will run for push events
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services

        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa

        # ssh commands
        # ssh user@your-server "cd /path/to/app &&
        #   docker-compose pull &&
        #   docker-compose up -d"
