name: CI/CD Pipeline

on:
  # For direct pushes to main (e.g. merges), only run the deployment steps
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  # For PRs, run the full test suite
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened] # Be specific about which PR events trigger the workflow
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    # Only run this job for pull_request events to avoid duplication
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download
        
    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        cache: true

    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: |
        echo "DEBUG: Current directory: $(pwd)"
        echo "DEBUG: Listing ./gradle/wrapper/ before build command:"
        ls -la ./gradle/wrapper/
        echo "DEBUG: Verifying ./gradle/wrapper/gradle-wrapper.jar existence and size:"
        if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          JAR_SIZE_BUILD=$(stat --format=%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "DEBUG: ./gradle/wrapper/gradle-wrapper.jar EXISTS. Size: $JAR_SIZE_BUILD bytes."
        else
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING before build command!"
          exit 1
        fi
        ./gradlew build --info

    - name: Run Unit Tests (excluding integration tests)
      working-directory: ./backend/autotrader-backend
      run: |
        # Check if integrationTest task exists
        if ./gradlew tasks | grep -q "integrationTest"; then
          echo "integrationTest task found, excluding it from test run"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test" --exclude-task integrationTest
        else
          echo "integrationTest task not found, running regular tests"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  postman-tests:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test]
    # Only run this job for pull_request events to avoid duplication
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          lfs: true

      # Setup Docker Services (similar to integration-tests and postman-tests.yml)
      - name: Setup Docker Services
        uses: ./.github/actions/docker-services-setup
        with:
          docker-compose-file: "./backend/autotrader-backend/docker-compose.dev.yml"
          services: "db minio createbuckets redis"
          wait-time: '60'
          db-container-name: "autotrader-backend-db-1" # From integration-tests.yml
          db-user: "autotrader"
          minio-container-name: "autotrader-backend-minio-1" # From integration-tests.yml
          createbuckets-container-name: "autotrader-backend-createbuckets-1" # From integration-tests.yml
          post-minio-ready-wait-seconds: '10' # Increased from 5 to 10

      # Start Spring Boot application (similar to postman-tests.yml)
      - name: Start Spring Boot Application
        id: spring-boot # id is needed for cleanup
        uses: ./.github/actions/spring-boot-setup
        with:
          working-directory: "./backend/autotrader-backend"
          spring-profiles: "dev"
          # debug-mode: 'true' # Optional: enable if needed for debugging CI runs
          wait-retries: '45'
          wait-time: '10'
          health-check-path: "/actuator/health"

      - name: Run Postman Tests
        uses: ./.github/actions/postman-tests
        with:
          collection-path: "backend/autotrader-backend/src/test/resources/postman/autotrader-api-collection.json"
          environment-file: "postman/test_environment.json" # Ensured this is environment-file
          working-directory: "./"
          results-directory: "newman" # Explicitly set results directory for consistency with upload path
          # Add any other inputs your postman-tests action requires

      - name: Upload Postman Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: newman/ # Assuming newman reports are saved here by the composite action
          if-no-files-found: ignore

      # Cleanup (similar to postman-tests.yml)
      - name: Cleanup test environment
        if: always()
        shell: bash
        run: |
          echo "Cleaning up test environment in CI/CD Postman job..."
          
          # Kill the Spring Boot process if it was started
          SPRING_PID="${{ steps.spring-boot.outputs.pid }}"
          if [ ! -z "$SPRING_PID" ]; then
            echo "Stopping Spring Boot application (PID: $SPRING_PID)..."
            kill $SPRING_PID || true
            echo "Spring Boot logs (last 50 lines from CI/CD Postman job):"
            LOG_FILE="./backend/autotrader-backend/spring-boot.log"
            if [ -f "$LOG_FILE" ]; then
              tail -n 50 "$LOG_FILE"
            else
              echo "Spring Boot log file not found at $LOG_FILE"
            fi
          else
            echo "Spring Boot PID not found, skipping kill."
          fi
          
          # Stop Docker services
          DOCKER_COMPOSE_FILE="./backend/autotrader-backend/docker-compose.dev.yml"
          if [ -f "$DOCKER_COMPOSE_FILE" ]; then
            echo "Stopping Docker services using $DOCKER_COMPOSE_FILE..."
            docker compose -f "$DOCKER_COMPOSE_FILE" down --volumes || echo "Docker compose down failed, continuing cleanup..."
          else
            echo "Docker compose file not found at $DOCKER_COMPOSE_FILE, skipping docker down."
          fi
          
          echo "Cleanup complete for CI/CD Postman job."

  frontend-build-and-test:
    runs-on: ubuntu-latest
    # Only run this job for pull_request events to avoid duplication
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Frontend Build and Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        # Default values for commands and report paths are used from the action itself

  docker-build:
    runs-on: ubuntu-latest
    # When triggered by push to main, this job should run after backend/frontend tests
    # when those are available. But for direct pushes to main (e.g., from merges),
    # those jobs won't run, so we don't want any dependencies.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]  # This is fine because docker-build will run for push events
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services

        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa

        # ssh commands
        # ssh user@your-server "cd /path/to/app &&
        #   docker-compose pull &&
        #   docker-compose up -d"
