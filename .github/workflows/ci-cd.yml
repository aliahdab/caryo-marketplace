name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download

    - name: Initial Check of Gradle Wrapper files (Post-Checkout)
      working-directory: ./backend/autotrader-backend
      run: |
        echo "=== Initial Check (Post-Checkout) ==="
        echo "Checking for gradle-wrapper.jar and gradle-wrapper.properties in $(pwd)..."
        if [ ! -d ./gradle/wrapper ]; then
          echo "ERROR: ./gradle/wrapper directory does not exist!"
          ls -la ./gradle/
          exit 1
        fi
        if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING post-checkout!"
          ls -la ./gradle/wrapper/
          exit 1
        else
          echo "./gradle/wrapper/gradle-wrapper.jar found post-checkout."
          JAR_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "Size: $JAR_SIZE bytes"
          echo "SHA256: $(sha256sum ./gradle/wrapper/gradle-wrapper.jar | awk '{print $1}')"
          if [ "$JAR_SIZE" -lt 1024 ]; then
            echo "Content of small gradle-wrapper.jar:"
            cat ./gradle/wrapper/gradle-wrapper.jar
            echo "--- End of small gradle-wrapper.jar content ---"
          fi
        fi
        if [ ! -f ./gradle/wrapper/gradle-wrapper.properties ]; then
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.properties is MISSING post-checkout!"
          ls -la ./gradle/wrapper/
          exit 1
        else
          echo "./gradle/wrapper/gradle-wrapper.properties found post-checkout."
        fi
        echo "=== End of Initial Check ==="

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2
      continue-on-error: true
      id: wrapper-validation

    - name: Check Gradle Wrapper files after setup-java and validation action
      working-directory: ./backend/autotrader-backend
      run: |
        echo "=== Check After setup-java & Validation Action ==="
        echo "Gradle wrapper validation action outcome: ${{ steps.wrapper-validation.outcome }}"
        echo "Checking for gradle-wrapper.jar and gradle-wrapper.properties in $(pwd)..."
        
        if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING!"
          echo "Listing ./gradle/wrapper/ contents:"
          ls -la ./gradle/wrapper/
          exit 1
        else
          echo "./gradle/wrapper/gradle-wrapper.jar found."
          JAR_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "Size: $JAR_SIZE bytes"
          echo "SHA256: $(sha256sum ./gradle/wrapper/gradle-wrapper.jar | awk '{print $1}')"
          if [ "$JAR_SIZE" -lt 1024 ]; then # If it's small, cat its content
            echo "Content of small gradle-wrapper.jar:"
            cat ./gradle/wrapper/gradle-wrapper.jar
            echo "--- End of small gradle-wrapper.jar content ---"
          fi
        fi

        if [ ! -f ./gradle/wrapper/gradle-wrapper.properties ]; then
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.properties is MISSING!"
          echo "Listing ./gradle/wrapper/ contents:"
          ls -la ./gradle/wrapper/
          exit 1
        else
          echo "./gradle/wrapper/gradle-wrapper.properties found."
          echo "Contents of ./gradle/wrapper/gradle-wrapper.properties:"
          cat ./gradle/wrapper/gradle-wrapper.properties
          if ! grep -q "services.gradle.org/distributions" ./gradle/wrapper/gradle-wrapper.properties; then
            echo "ERROR: Invalid distributionUrl in ./gradle/wrapper/gradle-wrapper.properties"
            exit 1
          fi
        fi
        echo "Gradle wrapper files appear to be correctly in place."

    - name: Grant execute permission for gradlew
      working-directory: ./backend/autotrader-backend
      run: chmod +x ./gradlew

    - name: Setup Gradle wrapper properly if issues detected
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Checking if gradle-wrapper.jar might be an LFS pointer or otherwise invalid..."
        MISSING_JAR=false
        INVALID_JAR=false
        JAR_SIZE=0
        
        # Check if JAR exists
        if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          echo "ERROR: gradle-wrapper.jar is missing."
          MISSING_JAR=true
        else
          # Check JAR size
          JAR_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "Current gradle-wrapper.jar size: $JAR_SIZE bytes"
          
          # Check for suspiciously small size (LFS pointer is ~130 bytes)
          if [ "$JAR_SIZE" -lt 10000 ]; then
            echo "WARNING: gradle-wrapper.jar is suspiciously small ($JAR_SIZE bytes). It might be an LFS pointer."
            echo "Content of the suspicious file:"
            cat ./gradle/wrapper/gradle-wrapper.jar
            INVALID_JAR=true
          fi
          
          # Try to verify JAR validity by checking ZIP header
          if ! file ./gradle/wrapper/gradle-wrapper.jar | grep -q "Zip archive"; then
            echo "WARNING: gradle-wrapper.jar does not appear to be a valid ZIP archive"
            INVALID_JAR=true
          fi
        fi
        
        # Fix wrapper if issues detected
        if [ "$MISSING_JAR" = true ] || [ "$INVALID_JAR" = true ]; then
          echo "Issues detected with gradle-wrapper.jar. Generating a new wrapper..."
          
          # Backup existing wrapper files
          mkdir -p ./gradle/wrapper-backup
          if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
            mv ./gradle/wrapper/gradle-wrapper.jar ./gradle/wrapper-backup/gradle-wrapper.jar.bak
          fi
          if [ -f ./gradle/wrapper/gradle-wrapper.properties ]; then
            cp ./gradle/wrapper/gradle-wrapper.properties ./gradle/wrapper-backup/gradle-wrapper.properties.bak
          fi
          
          # Try to use local gradle to generate wrapper
          if command -v gradle &> /dev/null; then
            echo "Generating wrapper using local gradle installation..."
            gradle wrapper --gradle-version 8.5 --distribution-type bin
          else
            # Try to download and use Gradle directly
            echo "Local gradle not found. Downloading Gradle 8.5..."
            GRADLE_ZIP=gradle-8.5-bin.zip
            GRADLE_URL=https://services.gradle.org/distributions/gradle-8.5-bin.zip
            
            curl -L -o $GRADLE_ZIP $GRADLE_URL
            unzip -q -d . $GRADLE_ZIP
            chmod +x ./gradle-8.5/bin/gradle
            ./gradle-8.5/bin/gradle wrapper --gradle-version 8.5 --distribution-type bin
            rm -rf gradle-8.5 $GRADLE_ZIP
          fi
          
          # Verify new wrapper
          if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
            NEW_SIZE=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
            echo "New gradle-wrapper.jar generated. Size: $NEW_SIZE bytes"
            if [ "$NEW_SIZE" -lt 10000 ]; then
              echo "ERROR: New gradle-wrapper.jar still suspiciously small. CI environment may need investigation."
              exit 1
            fi
          else
            echo "ERROR: Failed to generate gradle-wrapper.jar. CI environment may need investigation."
            exit 1
          fi
        else
          echo "gradle-wrapper.jar appears valid. Size: $JAR_SIZE bytes."
        fi
        
        # Final verification
        echo "Final verification of gradle-wrapper.jar:"
        ls -la ./gradle/wrapper/gradle-wrapper.jar
        file ./gradle/wrapper/gradle-wrapper.jar

    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: |
        echo "DEBUG: Current directory: $(pwd)"
        echo "DEBUG: Listing ./gradle/wrapper/ before build command:"
        ls -la ./gradle/wrapper/
        echo "DEBUG: Verifying ./gradle/wrapper/gradle-wrapper.jar existence and size:"
        if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          JAR_SIZE_BUILD=$(stat -c%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "DEBUG: ./gradle/wrapper/gradle-wrapper.jar EXISTS. Size: $JAR_SIZE_BUILD bytes."
          if [ "$JAR_SIZE_BUILD" -lt 1024 ]; then # If it's small, cat its content
            echo "DEBUG: Content of small gradle-wrapper.jar before build:"
            cat ./gradle/wrapper/gradle-wrapper.jar
            echo "--- End of small gradle-wrapper.jar content ---"
          fi
        else
          echo "DEBUG: CRITICAL ERROR! ./gradle/wrapper/gradle-wrapper.jar DOES NOT EXIST right before build command."
          # Attempt to list parent directories to understand path issues
          echo "DEBUG: Listing ./gradle/ :"
          ls -la ./gradle/
          echo "DEBUG: Listing . (current directory):"
          ls -la .
        fi
        ./gradlew build -x test

    - name: Run Unit Tests (excluding integration tests)
      working-directory: ./backend/autotrader-backend
      run: |
        # Check if integrationTest task exists
        if ./gradlew tasks | grep -q "integrationTest"; then
          echo "integrationTest task found, excluding it from test run"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test" --exclude-task integrationTest
        else
          echo "integrationTest task not found, running regular tests"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  frontend-build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: |
        echo "Running ESLint check to identify code issues..."
        npm run lint || (echo "::warning::ESLint issues found. See output above for details.")

    - name: Build frontend
      working-directory: ./frontend
      continue-on-error: false
      run: npm run build

    - name: Run Jest tests
      working-directory: ./frontend
      run: npm test

    - name: Upload ESLint report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: frontend/.eslintcache
        if-no-files-found: ignore

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-coverage
        path: frontend/coverage/

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services
        
        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa
        
        # ssh commands
        # ssh user@your-server "cd /path/to/app && \
        #   docker-compose pull && \
        #   docker-compose up -d"
