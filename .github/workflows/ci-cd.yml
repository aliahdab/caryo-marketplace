name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    # Add paths-ignore to prevent duplicate runs when only documentation or non-code files change
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download
        
    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        cache: true

    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: |
        echo "DEBUG: Current directory: $(pwd)"
        echo "DEBUG: Listing ./gradle/wrapper/ before build command:"
        ls -la ./gradle/wrapper/
        echo "DEBUG: Verifying ./gradle/wrapper/gradle-wrapper.jar existence and size:"
        if [ -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          JAR_SIZE_BUILD=$(stat --format=%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "DEBUG: ./gradle/wrapper/gradle-wrapper.jar EXISTS. Size: $JAR_SIZE_BUILD bytes."
        else
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING before build command!"
          exit 1
        fi
        ./gradlew build --info

    - name: Run Unit Tests (excluding integration tests)
      working-directory: ./backend/autotrader-backend
      run: |
        # Check if integrationTest task exists
        if ./gradlew tasks | grep -q "integrationTest"; then
          echo "integrationTest task found, excluding it from test run"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test" --exclude-task integrationTest
        else
          echo "integrationTest task not found, running regular tests"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  postman-tests:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test] # Ensure backend is built and potentially running if tests need a live service

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
          lfs: true

      - name: Run Postman Tests
        uses: ./.github/actions/postman-tests
        with:
          collection-path: "backend/autotrader-backend/src/test/resources/postman/autotrader-api-collection.json"
          environment-file: "postman/test_environment.json" # Ensured this is environment-file
          working-directory: "./"
          results-directory: "newman" # Explicitly set results directory for consistency with upload path
          # Add any other inputs your postman-tests action requires

      - name: Upload Postman Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-test-results
          path: newman/ # Assuming newman reports are saved here by the composite action
          if-no-files-found: ignore

  frontend-build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Frontend Build and Test
      uses: ./.github/actions/frontend-setup
      with:
        working-directory: './frontend'
        node-version: '18'
        cache-dependency-path: './frontend/package.json'
        # Default values for commands and report paths are used from the action itself

  docker-build:
    runs-on: ubuntu-latest # Corrected typo: ubuntu-lates -> ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test, postman-tests] # Added postman-tests dependency
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest # Corrected typo: ubuntu-lates -> ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services

        # Example SSH deployment (you'll need to set up SSH_PRIVATE_KEY in secrets)
        # install SSH key
        # mkdir -p ~/.ssh
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # chmod 600 ~/.ssh/id_rsa

        # ssh commands
        # ssh user@your-server "cd /path/to/app &&
        #   docker-compose pull &&
        #   docker-compose up -d"
