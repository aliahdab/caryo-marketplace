name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true # Explicitly enable LFS file download
        
    - name: Initial Check of Gradle Wrapper files
      working-directory: ./backend/autotrader-backend
      run: |
        echo "=== Initial Check (Post-Checkout) ==="
        echo "Checking for gradle-wrapper.jar and gradle-wrapper.properties in $(pwd)..."
        if [ ! -d ./gradle/wrapper ]; then
          echo "ERROR: ./gradle/wrapper directory does not exist!"
          ls -la ./gradle/
          exit 1
        fi
        
        if [ ! -f ./gradle/wrapper/gradle-wrapper.jar ]; then
          echo "ERROR: ./gradle/wrapper/gradle-wrapper.jar is MISSING post-checkout!"
          ls -la ./gradle/wrapper/
          exit 1
        else
          echo "./gradle/wrapper/gradle-wrapper.jar found post-checkout."
          JAR_SIZE=$(stat --format=%s ./gradle/wrapper/gradle-wrapper.jar)
          echo "Size: $JAR_SIZE bytes"
        fi
        echo "=== End of Initial Check ==="

    # Use the Gradle setup composite action
    - name: Setup Gradle Environment
      uses: ./.github/actions/gradle-setup
      with:
        working-directory: "./backend/autotrader-backend"
        java-version: "17"
        gradle-version: "8.5"
        cache: true

    - name: Build with Gradle
      working-directory: ./backend/autotrader-backend
      run: |
        echo "Building backend application..."
        ./gradlew build -x test

    - name: Run Unit Tests
      working-directory: ./backend/autotrader-backend
      run: |
        # Check if integrationTest task exists
        if ./gradlew tasks | grep -q "integrationTest"; then
          echo "integrationTest task found, excluding it from test run"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test" --exclude-task integrationTest
        else
          echo "integrationTest task not found, running regular tests"
          ./gradlew test --tests "com.autotrader.autotraderbackend.*Test"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results
        path: backend/autotrader-backend/build/reports/tests/

  frontend-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: |
        echo "Running ESLint check to identify code issues..."
        npm run lint || (echo "::warning::ESLint issues found. See output above for details.")

    - name: Build frontend
      working-directory: ./frontend
      continue-on-error: false
      run: npm run build

    - name: Run Jest tests
      working-directory: ./frontend
      run: npm test

    - name: Upload ESLint report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: frontend/.eslintcache
        if-no-files-found: ignore

    - name: Upload test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-coverage
        path: frontend/coverage/

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test, frontend-build-and-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/autotrader-backend
        file: ./backend/autotrader-backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-backend:${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/caryo-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your cloud provider
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # For example:
        # - SSH into your server
        # - Pull the new Docker images
        # - Update docker-compose.yml with new image tags
        # - Restart services
