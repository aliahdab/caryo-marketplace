"use client";

import { signIn, useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import React, { useState, useEffect, FormEvent } from "react";
import { useTranslation } from "react-i18next";
import { useApiErrorHandler } from '@/utils/apiErrorHandler';
import SimpleVerification from '@/components/auth/SimpleVerification';
import GoogleSignInButton from '@/components/auth/GoogleSignInButton';
import Link from 'next/link';
import Image from 'next/image';
import Image from 'next/image';

const SignInPage: React.FC = () => {
  const { t } = useTranslation();
  const router = useRouter();
  const { getErrorMessage } = useApiErrorHandler();
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [redirecting, setRedirecting] = useState(false);
  const [callbackUrl, setCallbackUrl] = useState("/dashboard");
  const [isVerified, setIsVerified] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const { data: session } = useSession();

  // Extract callback URL from search params if present
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Get the URL search params
      const searchParams = new URLSearchParams(window.location.search);
      const callback = searchParams.get('callbackUrl');
      
      if (callback) {
        try {
          // Handle both absolute and relative URLs properly
          if (callback.startsWith('/')) {
            // It's a relative URL path, use as is
            setCallbackUrl(callback);
          } else {
            // It might be an encoded absolute URL
            const url = new URL(decodeURIComponent(callback));
            // Only use the pathname + search if it's from the same origin
            // Otherwise use the default dashboard path
            if (url.origin === window.location.origin) {
              setCallbackUrl(url.pathname + url.search);
            }
          }
        } catch (e) {
          // Silently fail and keep the default dashboard URL
          // No need to log during tests
          if (process.env.NODE_ENV !== 'test') {
            console.warn('Error parsing callback URL:', e);
          }
        }
      }
    }
  }, []);

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();
    setLoading(true);
    setError(null);
    setShowSuccess(false);

    if (!username || !password) {
      setError(t('auth.usernamePasswordRequired', 'Username and password are required.'));
      setLoading(false);
      return;
    }

    if (!isVerified) {
      setError(t('auth.verificationRequired', "Verification required before login"));
      setLoading(false);
      return;
    }

    try {
      const result = await signIn("credentials", {
        redirect: false,
        username, // Changed from email to username
        password,
      });

      if (result?.error) {
        // Check specifically for authentication errors
        if (result.error.toLowerCase().includes('invalid') || 
            result.error.toLowerCase().includes('credentials') ||
            result.error.toLowerCase().includes('password') ||
            result.error.toLowerCase().includes('user')) {
          // Use our specific translation for credential errors
          setError(t('errors:errors.invalidCredentials', 'Invalid username or password. Please try again.'));
        } else {
          // For other errors, use our general error handler
          setError(getErrorMessage({ message: result.error }));
        }
        setLoading(false);
      } else if (result?.ok) {
        setShowSuccess(true); // Ensure success message is shown
        setRedirecting(true);
        setError(""); // Clear any previous errors
        
        // Force NextAuth to sync the session before redirecting
        const syncSession = async () => {
          try {
            // Wait a moment for NextAuth to complete its internal processes
            await new Promise(resolve => setTimeout(resolve, 800));
            
            // Try router first, fallback to direct navigation
            if (process.env.NODE_ENV !== "test") {
              try {
                router?.push?.(callbackUrl);
              } catch {
                // Fallback to direct navigation
                window.location.href = callbackUrl;
              }
            }
          } catch {
            // Silently handle errors in test environment
            if (process.env.NODE_ENV !== "test") {
              // Use safer fallback navigation without logging errors
              window.location.href = callbackUrl;
            }
          }
        };
        
        // Start the session sync process right away
        syncSession();
      } else {
        setError("An unknown error occurred.");
      }
    } catch {
      setError("An unknown error occurred.");
      // Log errors only in non-test environments
      if (process.env.NODE_ENV !== "test") {
        console.error("Sign-in error");
      }
    } finally {
      // Only reset loading if we're not redirecting
      if (!redirecting) {
        setLoading(false);
      }
    }
  };

  // Safe redirect when user already has an active session
  useEffect(() => {
    if (session && !redirecting) {
      // Use a safer redirection approach that won't fail if router isn't ready
      try {
        router?.push?.(callbackUrl);
      } catch {
        // Fallback to direct navigation if router push fails
        if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'test') {
          window.location.href = callbackUrl;
        }
      }
    }
  }, [session, callbackUrl, redirecting, router]);

  return (
    <div className="min-h-screen flex flex-col md:flex-row bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
      {/* Left section - Brand/imagery - REDUCED SIZE */}
      <div className="hidden md:flex md:w-2/5 bg-gradient-to-r from-blue-700 to-blue-600 text-white p-6 flex-col justify-between relative overflow-hidden">
        {/* Improved background pattern */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute left-0 right-0 top-0 bottom-0 opacity-5">
            <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
              <defs>
                <pattern id="smallGrid" width="10" height="10" patternUnits="userSpaceOnUse">
                  <path d="M 10 0 L 0 0 0 10" fill="none" stroke="currentColor" strokeWidth="0.5" />
                </pattern>
              </defs>
              <rect width="100%" height="100%" fill="url(#smallGrid)" />
            </svg>
          </div>
        </div>
        
        <div className="relative z-10">
          {/* Logo using actual logo image */}
          <div className="flex items-center mb-8">
            <div className="h-12 w-auto relative">
              <Image 
                src="/images/logo.svg" 
                alt="Caryo Logo" 
                width={48} 
                height={48} 
                className="object-contain" 
                priority
              />
            </div>
            <span className="ml-3 text-xl font-bold tracking-tight">Caryo</span>
          </div>
          
          <h1 className="text-3xl font-bold mb-4 tracking-tight">{t('auth.welcomeBack', 'Welcome back!')}</h1>
          <p className="text-base opacity-90 mb-5 leading-relaxed">
            {t('auth.signInDescription', 'Sign in to continue to your account and access all vehicle listings.')}
          </p>
          
          <div className="bg-white/10 backdrop-blur-sm p-5 rounded-lg border border-white/10 shadow-lg mb-6">
            <div className="flex items-start mb-3">
              <div className="mr-3 mt-1 text-blue-200 flex-shrink-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
              </div>
              <p className="text-sm leading-relaxed">
                {t('auth.benefitSafety', 'Secure and verified marketplace for buying and selling vehicles')}
              </p>
            </div>
            <div className="flex items-start">
              <div className="mr-3 mt-1 text-blue-200 flex-shrink-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
              </div>
              <p className="text-sm leading-relaxed">
                {t('auth.benefitExperience', 'Personalized experience based on your preferences')}
              </p>
            </div>
          </div>
        </div>
        
        <div className="relative z-10">
          <p className="text-xs opacity-70">
            Â© 2025 Caryo Marketplace. {t('auth.allRightsReserved', 'All rights reserved.')}
          </p>
        </div>
      </div>
      
      {/* Right section - Login form - INCREASED SIZE */}
      <div className="w-full md:w-3/5 p-4 md:p-0 flex items-center justify-center">
        <div className="max-w-md w-full px-6 py-8 md:py-10 bg-white dark:bg-gray-800 shadow-xl rounded-xl border border-gray-200 dark:border-gray-700">
          <div className="md:hidden flex items-center justify-center mb-8">
            {/* Mobile logo */}
            <div className="h-12 w-auto relative">
              <Image 
                src="/images/logo.svg" 
                alt="Caryo Logo" 
                width={48} 
                height={48} 
                className="object-contain" 
              />
              <span className="ml-3 text-xl font-bold text-gray-900 dark:text-white">Caryo</span>
            </div>
          </div>
          
          <h2 className="text-2xl md:text-3xl font-bold text-center text-gray-900 dark:text-white mb-2">
            {t('auth.signin')}
          </h2>
          <p className="text-center text-gray-600 dark:text-gray-400 mb-8">
            {t('auth.enterCredentials', 'Enter your credentials to access your account')}
          </p>
          
          {error && (
            <div role="alert" className="mb-6 p-4 bg-red-50 border-l-4 border-red-500 text-red-700 rounded-md dark:bg-red-900/30 dark:text-red-200 dark:border-red-700 flex items-center">
              <svg className="w-5 h-5 mr-2 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              {error}
            </div>
          )}
          {showSuccess && (
            <div role="alert" className="mb-6 p-4 bg-green-50 border-l-4 border-green-500 text-green-700 rounded-md dark:bg-green-900/30 dark:text-green-200 dark:border-green-700 flex items-center">
              <svg className="w-5 h-5 mr-2 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22 4 12 14.01 9 11.01"></polyline>
              </svg>
              {t('auth.loginSuccess', 'Login successful!')} {t('auth.redirecting', 'Redirecting...')}
            </div>
          )}

          <form onSubmit={handleSubmit} className={redirecting ? 'opacity-70 transition-opacity' : ''}>
            <div className="mb-5">
              <label htmlFor="username" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1.5">
                {t('auth.username')}
              </label>
              <div className="relative group">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 group-focus-within:text-blue-500 transition-colors">
                  <svg className="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                  </svg>
                </div>
                <input
                  id="username"
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                  className="block w-full pl-10 px-4 py-2.5 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all duration-200"
                  placeholder={t('auth.usernamePlaceholder', 'Enter your username')}
                />
              </div>
            </div>
            
            <div className="mb-5">
              <div className="flex items-center justify-between mb-1.5">
                <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  {t('auth.password')}
                </label>
                <Link href="/auth/forgot-password" className="text-sm font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
                  {t('auth.forgotPassword', 'Forgot password?')}
                </Link>
              </div>
              <div className="relative group">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-400 group-focus-within:text-blue-500 transition-colors">
                  <svg className="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                  </svg>
                </div>
                <input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  className="block w-full pl-10 px-4 py-2.5 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent sm:text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all duration-200"
                  placeholder={t('auth.passwordPlaceholder', 'â¢â¢â¢â¢â¢â¢â¢â¢')}
                />
              </div>
            </div>
            
            <div className="mb-5">
              <SimpleVerification 
                onVerified={(verified: boolean) => {
                  if (verified !== isVerified) { 
                    setIsVerified(verified);
                    if (verified) {
                      if
